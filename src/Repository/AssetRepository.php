<?php

Namespace App\Repository;

use App\Entity\Asset\Asset;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * AssetApp\Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AssetRepository extends ServiceEntityRepository
{

    public function __construct( RegistryInterface $registry )
    {
        parent::__construct( $registry, Asset::class );
    }

    public function findOneByBarcodeId( $barcodeId )
    {
        if( !empty( $barcodeId ) )
        {

            $em = $this->getEntityManager();

            $queryBuilder = $em->createQueryBuilder()->select( ['a'] )
                    ->from( 'App\Entity\Asset\Asset', 'a' )
                    ->join( 'a.barcodes', 'b' )
                    ->where( "b.id = :barcode_id" )
                    ->setMaxResults( 1 )
                    ->setParameter( 'barcode_id', strtolower( $barcodeId ) );

            $data = $queryBuilder->getQuery()->getResult();
        }
        else
        {
            $data = null;
        }
        return $data;
    }

    public function findByBarcode( $barcode )
    {
        if( !empty( $barcode ) )
        {
            $em = $this->getEntityManager();
            $queryBuilder = $em->createQueryBuilder()->select( ['a'] )
                    ->from( 'App\Entity\Asset\Asset', 'a' )
                    ->join( 'a.barcodes', 'b' )
                    ->where( "LOWER(b.barcode) LIKE :barcode" )
                    ->setParameter( 'barcode', strtolower( $barcode ) );
            $data = $queryBuilder->getQuery()->getResult();
        }
        else
        {
            $data = null;
        }
        return $data;
    }

    public function findByLocation( $locationType, $locationId )
    {
        if( !empty( $locationType ) )
        {
            $em = $this->getEntityManager();
            $queryBuilder = $em->createQueryBuilder()->select( ['a', 'm'] )
                    ->from( 'App\Entity\Asset\Asset', 'a' )
                    ->join( 'a.location', 'l' )
                    ->join( 'a.model', 'm' )
                    ->where( 'l.type = :location_type' )
                    ->andWhere( 'l.entity = :location_id' )
                    ->orderBy( 'm.name' )
                    ->addOrderBy( 'm.id' )
                    ->setParameters( ['location_type' => $locationType, 'location_id' => $locationId] );
            $data = $queryBuilder->getQuery()->getResult();
        }
        else
        {
            $data = null;
        }
        return $data;
    }

    // Supports search drop down
    public function findByNameLike( $barcode )
    {
        $barcode = '%' . str_replace( '*', '%', strtolower( $barcode ) );
        return $this->findByBarcode( $barcode );
    }

}
